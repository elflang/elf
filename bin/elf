#!/bin/sh

if [ ! -z "$VERBOSE" ]; then
  echo "$@"
  printf "%s is '%s'\n" "\$*" "$*"
  printf "%s is '%s'\n" "\$0" "$0"
  printf "%s is '%s'\n" "pwd" "$(pwd)"
  set -x
fi

dir="$(pwd)"
x="$(readlink -f "$0" 2>/dev/null || readlink "$0" 2>/dev/null || echo "$0")"
case "$x" in
  ../*)
  case "$0" in
    ../*) ;;
       *) x="$(dirname "$0")/${x}" ;;
  esac
esac
home="$(cd "$(dirname "$x")" && cd .. && echo "$(pwd)")"
if [ ! -d "${home}" ]; then
  echo "elf dir not found" && exit 1
fi
elf="${home}/bin/elf"
cd "${dir}"

case "$1" in
  path|home|root)
    echo "${home}"
    exit 0
  ;;

  which)
    echo "${elf}"
    exit 0
  ;;

  version|--version|-v)
    v="$(cat "${home}/package.json" | grep version)"
    if [ ! -z "$(which sed)" ]; then
      v="$(echo "$v" | sed -n -e 's/^.*"\([0-9.]*\)".*/\1/p')"
    fi
    echo "$v"
    exit 0
  ;;

  examples|example|eg|ex)
    xs="$(cd "${home}" && find . -type f | grep examples | grep '\.e$' | grep -v '/\.' | awk '{print substr($0,3)}')"
    if [ ! -z "$2" ]; then
      x="$(echo "${xs}" | grep "$2")"
      n="$(echo "$x" | wc -l | sed -e 's/ //g')"
      if [ "$n" = "1" ] && [ ! -z "$x" ]; then
        shift 1
        shift 1
        exec "${elf}" "${home}/${x}" "$@"
        exit 0
      fi
      case "$n" in
        "0")
          echo "No such example '$2'"
          echo "You can run \`elf eg\` to see a list of examples"
          exit 1
        ;;
        *)
          echo "# Which of these did you want to run?"
          echo "$x"
          exit 1
        ;;
      esac
    else
      cat<<end
# You can use \`elf eg foo\` to run an example program whose name contains "foo"

$(echo "$xs" | xargs -n 1 -I{} echo " bin/elf {}")

# Express.js demo
elf eg express

# Game engine demo
elf eg notch

# Luvit demo
elf eg http-client
end
      exit 0
    fi
  ;;

  update)
    if [ ! -e "${home}/bin/elf-update" ]; then
      echo "${home}/bin/elf-update not found"
      exit 1
    fi
    exec /bin/sh "${home}/bin/elf-update"
    exit 0
  ;;
esac

if [ ! -z "${ELF_HOST}" ]
then
  host="${ELF_HOST}"
else
  case "$1" in
    *.js.e)     host=node;;
    *.node.e)   host=node;;
    *.lua.e)    host=lua;;
    *.luajit.e) host=luajit;;
    *.luvit.e)  host=luvit;;
    *.ufo.e)    host=ufo;;
  esac
fi

if [ -z "$host" ]
then
  if luajit -v > /dev/null 2>&1
  then
    host=luajit
  elif lua -v > /dev/null 2>&1
  then
    host=lua
  elif node -v > /dev/null 2>&1
  then
    host=node
  else
    echo "no host found"
    echo "install luajit, lua, or node, e.g."
    echo "  brew install luajit"
    echo "  sudo apt-get install luajit"
    exit 1
  fi
fi

case "$host" in
  luvit*)
    host="$(which "$host")"
    if [ -z "$host" ]; then
      luvit="${home}/bin/luvit"
      luvit="$(readlink -f "$luvit" 2>/dev/null || readlink "$luvit" 2>/dev/null || echo "$luvit")"
      if [ ! -d "$luvit" ]; then
        read -r -p "luvit not found. Install it to '${home}/bin/luvit'? [y/N] " response
        if [ "$response" = "y" ]; then
          rm -f "${home}/bin/luvit"
          echo git clone https://github.com/luvit/luvit "${home}/bin/luvit"
          # git clone 'https://github.com/luvit/luvit' "${home}/bin/luvit"
          mkdir -p "${home}/bin/luvit" && cd "${home}/bin/luvit" && /bin/sh "${home}/bin/vendor/get-lit.sh" && "${home}/bin/luvit/lit" make 'lit://luvit/luvit'
          cd "${dir}"
        else
          exit 1
        fi
      fi
      host="${home}/bin/luvit/luvit"
    fi
    host="$(readlink -f "$host" 2>/dev/null || readlink "$host" 2>/dev/null || echo "$host")"
  ;;
  ufo*)
    host="$(which "$host")"
    if [ -z "$host" ]; then
      ufo="${home}/bin/ufo"
      ufo="$(readlink -f "$ufo" 2>/dev/null || readlink "$ufo" 2>/dev/null || echo "$ufo")"
      if [ ! -d "$ufo" ]; then
        read -r -p "ufo not found. Install it to '${home}/bin/ufo'? [y/N] " response
        if [ "$response" = "y" ]; then
          rm -f "${home}/bin/ufo"
          echo git clone https://github.com/malkia/ufo "${home}/bin/ufo"
          git clone 'https://github.com/malkia/ufo' "${home}/bin/ufo"
        else
          exit 1
        fi
      fi
      host="${home}/bin/ufo/luajit"
    fi
    host="$(readlink -f "$host" 2>/dev/null || readlink "$host" 2>/dev/null || echo "$host")"
    # add ufo's precompiled libraries to the shared library search path
    x="$host"
    x="$(dirname "$x")"
    x="$(cd "$x" && echo "$(pwd)")"
    libpath="$x"
    if [ ! -z "${libpath}" ]; then
      export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${dir}:${libpath}"
      export DYLD_LIBRARY_PATH="${DYLD_LIBRARY_PATH}:${dir}:${libpath}"
    fi
  ;;
esac

if [ -z "$host" ]; then
  echo "no host found" && exit 1
fi

case "$host" in
    node*)
        code=main.js
        export NODE_PATH="${NODE_PATH}:${dir}:${home}";;
    *)
        code=main.lua
        export LUA_PATH="${LUA_PATH};${dir}/?.lua;${home}/?.lua";;
esac

rlwrap=""
if [ -z "$*" ]; then
  if [ -z "${NO_RLWRAP}" ]; then
    if [ -z "$(which rlwrap)" ]; then
      cmd=""
      if [ ! -z "$(which brew)" ];
      then cmd="brew install rlwrap";
      elif [ ! -z "$(which apt-get)" ];
      then cmd="sudo apt-get install rlwrap";
      elif [ ! -z "$(which yum)" ];
      then cmd="yum install rlwrap";
      elif [ -d "/usr/ports" ];
      then cmd="cd /usr/ports/devel/rlwrap/ && make install clean"
      fi

      echo "rlwrap not found"
      if [ ! -z "$cmd" ]; then
        echo "Try installing it with:\n${cmd}"
      fi
    else
      rlwrap='rlwrap -q"'
    fi
  fi
fi

import () {
  x="$1"
  if [ ! -z "$x" ]; then
    if [ -d "${x}" ]; then
      case "$host" in
        node*)
          export NODE_PATH="$NODE_PATH:${x}";;
        *)
          export LUA_PATH="$LUA_PATH;${x}/?/?.lua;${x}/?/init.lua"
      esac
    fi
  fi
}

case "$1" in *.e)
  path="$(dirname "$1")"
  if [ ! -z "$path" ]; then
    if [ -e "${path}/package.json" ]; then
      if [ ! -z "$(cat "${path}/package.json" | grep "dependencies")" ]; then
        if [ ! -d "${path}/node_modules" ]; then
          if [ ! -z "$(which npm)" ]; then
            echo "cd '${path}' && npm i"
            cd "${path}" && npm i
            cd "${dir}"
          fi
        fi
      fi
    fi
    import "${path}/node_modules"
  fi
  ;;
esac

import "${dir}/node_modules"
import "/usr/local/lib/node_modules"
import "/usr/lib/node_modules"

case "$host" in
    node*)
      export NODE_PATH="$NODE_PATH:${dir}:${home}:${home}/lib";;
    *)
      export LUA_PATH="$LUA_PATH;${dir}/?.lua;${home}/?.lua;${home}/lib/?.lua";;
esac
export ELF_HOST="${host}"
export ELF_HOME="${home}"

case "$1" in *.e)
  script="$1"
  shift 1
  base="$(basename "$script" .e)"
  case "$base" in
    *.js)     base="$(basename "$base" .js)";;
    *.node)   base="$(basename "$base" .node)";;
    *.lua)    base="$(basename "$base" .lua)";;
    *.luajit) base="$(basename "$base" .luajit)";;
    *.luvit)  base="$(basename "$base" .luvit)";;
    *.ufo)    base="$(basename "$base" .ufo)";;
  esac
  path="$(dirname "${script}")"
  base="${path}/${base}"
  if [ -e "${base}.js" ]; then
    if [ ! -s "${base}.js" ] || [ "$script" -nt "${base}.js" ]; then
      "${host}" "${home}/${code}" -c "$script" -o "${base}.js" -t js
    fi
    case "$host" in node*)
      script="${base}.js" ;;
    esac
  fi
  if [ -e "${base}.lua" ]; then
    if [ ! -s "${base}.lua" ] || [ "$script" -nt "${base}.lua" ]; then
      "${host}" "${home}/${code}" -c "$script" -o "${base}.lua" -t lua
    fi
    case "$host" in
      node*) ;;
      *)
      script="${base}.lua" ;;
    esac
  fi
  exec ${host} "${home}/${code}" "$script" "$@"
  ;;
esac

exec $rlwrap ${host} "${home}/${code}" "$@"
