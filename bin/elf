#!/bin/sh

if [ ! -z "$VERBOSE" ]; then
  set -x
fi

dir="$(pwd)"
x="$(readlink -f "$0" 2>/dev/null || readlink "$0" 2>/dev/null)"
case "$x" in
  ../*) x="$(dirname "$0")/${x}" ;;
     *) x="$0" ;;
esac
home="$(cd "$(dirname "$x")" && cd .. && echo "$(pwd)")"
if [ ! -d "${home}" ]; then
  echo "elf dir not found" && exit 1
fi
cd "${dir}"

if [ "$1" = "update" ]; then
  if [ -e "${home}/bin/elf-update" ]; then
    exec /bin/sh "${home}/bin/elf-update"
    exit 0
  fi
fi

if [ ! -z "${ELF_HOST}" ]
then
  host="${ELF_HOST}"
else
  case "$1" in
    *.js.elf)     host=node;;
    *.node.elf)   host=node;;
    *.lua.elf)    host=lua;;
    *.luajit.elf) host=luajit;;
    *.luvit.elf)  host=luvit;;
    *.ufo.elf)    host=ufo;;
  esac
fi

if [ -z "$host" ]
then
  if luajit -v > /dev/null 2>&1
  then
      host=luajit
  elif lua -v > /dev/null 2>&1
  then
      host=lua
  elif node -v > /dev/null 2>&1
  then
      host=node
  else
      echo "no host found" && exit 1
  fi
fi

case "$host" in
  luvit*)
    host="$(which "$host")"
    if [ -z "$host" ]; then
      luvit="${home}/bin/luvit"
      luvit="$(readlink -f "$luvit" 2>/dev/null || readlink "$luvit" 2>/dev/null || echo "$luvit")"
      if [ ! -d "$luvit" ]; then
        read -r -p "luvit not found. Install it to '${home}/bin/luvit'? [y/N] " response
        if [ "$response" = "y" ]; then
          rm -f "${home}/bin/luvit"
          echo git clone https://github.com/luvit/luvit "${home}/bin/luvit"
          git clone 'https://github.com/luvit/luvit' "${home}/bin/luvit" && cd "${home}/bin/luvit" && make
          cd "${dir}"
        else
          exit 1
        fi
      fi
      host="${home}/bin/luvit/luvit"
    fi
    host="$(readlink -f "$host" 2>/dev/null || readlink "$host" 2>/dev/null || echo "$host")"
  ;;
  ufo*)
    host="$(which "$host")"
    if [ -z "$host" ]; then
      ufo="${home}/bin/ufo"
      ufo="$(readlink -f "$ufo" 2>/dev/null || readlink "$ufo" 2>/dev/null || echo "$ufo")"
      if [ ! -d "$ufo" ]; then
        read -r -p "ufo not found. Install it to '${home}/bin/ufo'? [y/N] " response
        if [ "$response" = "y" ]; then
          rm -f "${home}/bin/ufo"
          echo git clone https://github.com/malkia/ufo "${home}/bin/ufo"
          git clone 'https://github.com/malkia/ufo' "${home}/bin/ufo"
        else
          exit 1
        fi
      fi
      host="${home}/bin/ufo/luajit"
    fi
    host="$(readlink -f "$host" 2>/dev/null || readlink "$host" 2>/dev/null || echo "$host")"
    # add ufo's precompiled libraries to the shared library search path
    x="$host"
    x="$(dirname "$x")"
    x="$(cd "$x" && echo "$(pwd)")"
    libpath="$x"
    if [ ! -z "${libpath}" ]; then
      export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${dir}:${libpath}"
      export DYLD_LIBRARY_PATH="${DYLD_LIBRARY_PATH}:${dir}:${libpath}"
    fi
  ;;
esac

if [ -z "$host" ]; then
  echo "no host found" && exit 1
fi

case "$host" in
    node*)
        code=main.js
        export NODE_PATH="${NODE_PATH}:${dir}:${home}";;
    *)
        code=main.lua
        export LUA_PATH="${LUA_PATH};${dir}/?.lua;${home}/?.lua";;
esac

rlwrap=""
if [ -z "$*" ]; then
  if [ -z "${NO_RLWRAP}" ]; then
    if [ -z "$(which rlwrap)" ]; then
      cmd=""
      if [ ! -z "$(which brew)" ];
      then cmd="brew install rlwrap";
      elif [ ! -z "$(which apt-get)" ];
      then cmd="sudo apt-get install rlwrap";
      elif [ ! -z "$(which yum)" ];
      then cmd="yum install rlwrap";
      elif [ -d "/usr/ports" ];
      then cmd="cd /usr/ports/devel/rlwrap/ && make install clean"
      fi

      echo "rlwrap not found"
      if [ ! -z "$cmd" ]; then
        echo "Try installing it with:\n${cmd}"
      fi
    else
      rlwrap='rlwrap -q"'
    fi
  fi
fi

import () {
  x="$1"
  if [ ! -z "$x" ]; then
    if [ -d "${x}" ]; then
      case "$host" in
        node*)
          export NODE_PATH="$NODE_PATH:${x}";;
        *)
          export LUA_PATH="$LUA_PATH;${x}/?/?.lua;${x}/?/index.lua"
      esac
    fi
  fi
}

case "$1" in *.elf)
  path="$(dirname "$1")"
  if [ ! -z "$path" ]; then
    if [ -e "${path}/package.json" ]; then
      if [ ! -z "$(cat "${path}/package.json" | grep "dependencies")" ]; then
        if [ ! -d "${path}/node_modules" ]; then
          if [ ! -z "$(which npm)" ]; then
            echo "cd '${path}' && npm i"
            cd "${path}" && npm i
            cd "${dir}"
          fi
        fi
      fi
    fi
    import "${path}/node_modules"
  fi
  ;;
esac

import "${dir}/node_modules"
import "/usr/local/lib/node_modules"
import "/usr/lib/node_modules"

case "$host" in
    node*)
      export NODE_PATH="$NODE_PATH:${dir}:${home}";;
    *)
      export LUA_PATH="$LUA_PATH;${dir}/?.lua;${home}/?.lua";;
esac

case "$1" in *.elf)
  script="$1"
  shift 1
  base="$(basename "$script" .elf)"
  case "$base" in
    *.js)     base="$(basename "$base" .js)";;
    *.node)   base="$(basename "$base" .node)";;
    *.lua)    base="$(basename "$base" .lua)";;
    *.luajit) base="$(basename "$base" .luajit)";;
    *.luvit)  base="$(basename "$base" .luvit)";;
    *.ufo)    base="$(basename "$base" .ufo)";;
  esac
  path="$(dirname "${script}")"
  base="${path}/${base}"
  if [ -e "${base}.js" ]; then
    if [ ! -s "${base}.js" ] || [ "$script" -nt "${base}.js" ]; then
      "${host}" "${home}/${code}" -c "$script" -o "${base}.js" -t js
    fi
    case "$host" in node*)
      script="${base}.js" ;;
    esac
  fi
  if [ -e "${base}.lua" ]; then
    if [ ! -s "${base}.lua" ] || [ "$script" -nt "${base}.lua" ]; then
      "${host}" "${home}/${code}" -c "$script" -o "${base}.lua" -t lua
    fi
    case "$host" in
      node*) ;;
      *)
      script="${base}.lua" ;;
    esac
  fi
  exec "${host}" "${home}/${code}" "$script" "$@"
  ;;
esac

export ELF_HOST="${host}"
exec $rlwrap "${host}" "${home}/${code}" "$@"
