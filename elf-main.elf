;; -*- mode: lisp -*-

(def reader (require 'reader))
(def compiler (require 'compiler))
(def system (require 'system))

(var eval-print (form)
  (let ((ok x trace) (guard (compiler.eval form)))
    (if (not ok)
        (do (%js (print trace))
            (%lua (print (cat "error: " x "\n" trace))))
        (is? x) (print (str x)))))

(var rep (s)
  (eval-print (reader.read-string s)))

(var repl ()
  (let buf ""
    (var rep1 (s)
      (cat! buf s)
      (let (more ()
            form (reader.read-string buf more))
          (unless (is form more)
            (eval-print form)
            (assign buf "")
            (system.write "> ")))))
  (system.write "> ")
  (%js
    (let in process.stdin
      (in.setEncoding 'utf8)
      (in.on 'data rep1)))
  (%lua
    (while true
      (let s (io.read)
        (if s (rep1 (cat s "\n"))
          (break))))))

(def compile-file (path)
  (let (s (reader.stream (system.read-file path))
        body (reader.read-all s)
        form (compiler.expand `(do ,@body)))
    (compiler.compile form :stmt)))

(def load (path)
  (compiler.run (compile-file path)))

(var run-file (path)
  (compiler.run (system.read-file path)))

(def elf-usage ()
  (print "usage: elf [options] <object files>")
  (print "options:")
  (print "  -c <input>\tCompile input file")
  (print "  -o <output>\tOutput file")
  (print "  -t <target>\tTarget language (default: lua)")
  (print "  -e <expr>\tExpression to evaluate")
  (system.exit))

(def elf-main ()
  (let arg (hd system.argv)
    (when (or (is arg "-h")
              (is arg "--help"))
      (elf-usage)))
  (let (pre ()
        input nil
        output nil
        target1 nil
        expr nil
        argv system.argv
        n (# argv))
    (for i n
      (let a (at argv i)
        (if (or (is a "-c") (is a "-o") (is a "-t") (is a "-e"))
            (if (is i (- n 1))
                (print (cat "missing argument for " a))
              (do (inc i)
                  (let val (at argv i)
                    (if (is a "-c") (assign input val)
                        (is a "-o") (assign output val)
                        (is a "-t") (assign target1 val)
                        (is a "-e") (assign expr val)))))
            (~is "-" (char a 0)) (add pre a))))
    (step file pre
      (run-file file))
    (if (nil? input) (if expr (rep expr) (repl))
      (do (if target1 (assign target target1))
          (let code (compile-file input)
            (if (or (nil? output) (is output "-"))
                (print code)
              (system.write-file output code)))))))

