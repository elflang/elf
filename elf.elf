;; -*- mode: lisp -*-

;; This file defines a small runtime that implements the Elf language.
;;
;; Whenever this file is modified and recompiled, the compiler --
;; which is using an older version of the Elf runtime when it begins
;; compiling this file -- steps through each expression, generates
;; equivalent JS or Lua code, then overwrites the old .js and .lua
;; files with the new code.
;;
;; This enables us to implement the Elf language in Elf.  No external
;; Javascript or Lua code files are used.

(var setup ()

  ;; We begin by defining the core language constructs as macros.
  ;; 
  ;; Each `mac` expression compiles to a call to `setenv`,
  ;; but `setenv` hasn't been defined yet.  Therefore we put them
  ;; inside this wrapper function, which is called at the bottom of
  ;; the file.
  ;;
  ;; Note that whenever the compiler encounters a `(mac ...)`
  ;; form, the compiler passes it to `eval` immediately.  In other
  ;; words, it has an immediate effect on the compile-time
  ;; environment.  This enables us to start using each macro right
  ;; away, without even calling this wrapper function.
  ;;
  ;; In that case, why call this wrapper function at all?  Consider
  ;; the following Javascript:
  ;;
  ;;   require("l.js");
  ;;
  ;; This doesn't recompile `l.elf`, but still needs to load all
  ;; the macros defined in it.

  (mac quote (form)
    (quoted form))

  (mac quasiquote (form)
    (quasiexpand form 1))

  (mac at (l i)
    (if (and (= target 'lua) (number? i))
        (inc i)
        (= target 'lua)
        (set i `(+ ,i 1)))
    `(get ,l ,i))

  (mac wipe (place)
    (if (= target 'lua)
        `(set ,place nil)
      `(%delete ,place)))

  (mac list body
    (let-unique (x)
      (let (l () forms ())
        (each (k v) body
          (if (number? k)
              (set (get l k) v)
            (add forms `(set (get ,x ',k) ,v))))
        (if (some? forms)
            `(let ,x (%array ,@l) ,@forms ,x)
          `(%array ,@l)))))

  (mac if branches
    (hd (expand-if branches)))

  (mac case (x rest: clauses)
    (let-unique (e)
      (let bs (map (fn ((a b))
                     (if (nil? b)
                         (list a)
                       `((= ,a ,e) ,b)))
                   (pair clauses))
        `(let (,e ,x) (if ,@(apply join bs))))))

  (mac when (cond rest: body)
    `(if ,cond (do ,@body)))

  (mac unless (cond rest: body)
    `(if (not ,cond) (do ,@body)))

  (mac obj body
    `(%object ,@(mapo (fn (x) x) body)))

  (mac let (bs rest: body)
    (if (atom? bs) `(let (,bs ,(hd body)) ,@(tl body))
        (none? bs) `(do ,@body)
      (let ((lh rh rest: bs2) bs
            (id val rest: bs1) (bind lh rh))
        (let renames ()
          (if (or (bound? id) (toplevel?))
              (let id1 (unique id)
                (set renames (list id id1))
                (set id id1))
            (setenv id :variable))
          `(do (%local ,id ,val)
               (let-symbol ,renames
                 (let ,(join bs1 bs2) ,@body)))))))

  (mac with (x v rest: body)
    `(let (,x ,v) ,@body ,x))

  (mac let-when (x v rest: body)
    (let-unique (y)
      `(let ,y ,v
         (when ,y
           (let (,x ,y)
             ,@body)))))

  (mac mac (name args rest: body)
    (let form `(setenv ',name macro: (fn ,args ,@body))
      (eval form)
      form))

  (mac defspecial (name args rest: body)
    (let form `(setenv ',name special: (fn ,args ,@body) ,@(keys body))
      (eval form)
      form))

  (mac defsym (name expansion)
    (setenv name symbol: expansion)
    `(setenv ',name symbol: ',expansion))

  (mac var (name x rest: body)
    (setenv name :variable)
    (if (some? body)
        `(%local-function ,name ,@(bind* x body))
      `(%local ,name ,x)))

  (mac def (name x rest: body)
    (setenv name :toplevel :variable)
    (if (some? body)
        `(%global-function ,name ,@(bind* x body))
      `(set ,name ,x)))

  (mac with-frame body
    (let-unique (x)
      `(do (add environment (obj))
           (with ,x (do ,@body)
             (drop environment)))))

  (mac with-bindings ((names) rest: body)
    (let-unique (x)
     `(with-frame
        (each ,x ,names
          (setenv ,x :variable))
        ,@body)))

  (mac let-macro (definitions rest: body)
    (with-frame
      (map (fn (m)
             (macroexpand `(mac ,@m)))
           definitions)
      `(do ,@(macroexpand body))))

  (mac let-symbol (expansions rest: body)
    (with-frame
      (map (fn ((name exp))
             (macroexpand `(defsym ,name ,exp)))
           (pair expansions))
      `(do ,@(macroexpand body))))

  (mac let-unique (names rest: body)
    (let bs (map (fn (n)
                   (list n `(unique ',n)))
                 names)
      `(let ,(apply join bs)
         ,@body)))

  (mac fn (args rest: body)
    `(%function ,@(bind* args body)))

  (mac guard (expr)
    (if (= target 'js)
        `((fn () (%try (list true ,expr))))
      (let-unique (x msg trace)
        `(let (,x nil
               ,msg nil
               ,trace nil)
           (if (xpcall
                (fn () (set ,x ,expr))
                (fn (m)
                  (set ,msg (clip m (+ (search m ": ") 2)))
                  (set ,trace (debug.traceback))))
               (list true ,x)
             (list false ,msg ,trace))))))

  (mac each (x t rest: body)
    (let-unique (o n i)
      (let ((k v) (if (atom? x) (list i x)
                    (if (> (# x) 1) x
                        (list i (hd x)))))
        `(let (,o ,t ,k nil)
           (%for ,o ,k
             (let (,v (get ,o ,k))
               ,@(if (= target 'lua) body
                     `((let ,k (if (numeric? ,k)
                                   (parseInt ,k)
                                 ,k)
                         ,@body)))))))))

  (mac for (i to rest: body)
    `(let ,i 0
       (while (< ,i ,to)
         ,@body
         (inc ,i))))

  (mac step (v t rest: body)
    (let-unique (x n i)
      `(let (,x ,t ,n (# ,x))
         (for ,i ,n
           (let (,v (at ,x ,i))
             ,@body)))))

  (mac set-of xs
    (let l ()
      (each x xs
        (set (get l x) true))
      `(obj ,@l)))

  (mac language () `',target)

  (mac target clauses
    (get clauses target))

  (mac join! (a rest: bs)
    `(set ,a (join ,a ,@bs)))

  (mac cat! (a rest: bs)
    `(set ,a (cat ,a ,@bs)))

  (mac inc (n by)
    `(set ,n (+ ,n ,(or by 1))))

  (mac dec (n by)
    `(set ,n (- ,n ,(or by 1))))

  (mac with-indent (form)
    (let-unique (x)
      `(do (inc indent-level)
           (with ,x ,form
             (dec indent-level)))))

  (mac export names
    (if (= target 'js)
        `(do ,@(map (fn (k)
                      `(set (get exports ',k) ,k))
                    names))
      (let x (obj)
        (each k names
          (set (get x k) k))
        `(return (obj ,@x)))))

  (mac undef? (var)
    (if (= target 'js)
       `(= (typeof ,var) "undefined")
     `(= ,var nil)))

  (mac %js forms
    (when (= target 'js)
      `(do ,@forms)))

  (mac %lua forms
    (when (= target 'lua)
      `(do ,@forms)))

  (mac eval-compile forms
    (eval `(do ,@forms))
    nil)

  (mac eval-once forms
    (let-unique (x)
      `(when (undef? ,x)
         (set ,x true)
         ,@forms)))

  ;; Since we're within a wrapper function, the above definitions were
  ;; attached to a local compilation frame.  Normally this frame would
  ;; be dropped at the end of this wrapper function's scope.  Since we
  ;; want the definitions to persist, we insert them into the toplevel
  ;; frame.
  (eval-compile
    (join! (at environment 0) (at environment 1))))

(eval-once
  (def environment (list (obj)))
  (def target (language)))

(def nil? (x)
  (%js (or (= x nil) (= x null)))
  (%lua (= x nil)))

(def is? (x) (~nil? x))

(def # (x)
  (%js (or x.length 0))
  (%lua |#x|))

(def none? (x) (= (# x) 0))
(def some? (x) (> (# x) 0))
(def one? (x) (= (# x) 1))
(def two? (x) (= (# x) 2))

(def hd (l) (at l 0))

(%js (def type (x) (typeof x)))

(def string? (x) (= (type x) 'string))
(def number? (x) (= (type x) 'number))
(def boolean? (x) (= (type x) 'boolean))
(def function? (x) (= (type x) 'function))

(def atom? (x)
  (or (nil? x) (string? x) (number? x) (boolean? x)))

(def nan (/ 0 0))
(def inf (/ 1 0))

(def nan? (n)
  (~= n n))

(def inf? (n)
  (or (= n inf) (= n -inf)))

(def clip (s from upto)
  (%js (s.substring from upto))
  (%lua (string.sub s (+ from 1) upto)))

(def cut (x from upto)
  (with l ()
    (let (j 0
          i (if (or (nil? from) (< from 0)) 0 from)
          n (# x)
          upto (if (or (nil? upto) (> upto n)) n upto))
      (while (< i upto)
        (set (at l j) (at x i))
        (inc i)
        (inc j))
      (each (k v) x
        (unless (number? k)
          (set (get l k) v))))))

(def keys (x)
  (with t ()
    (each (k v) x
      (unless (number? k)
        (set (get t k) v)))))

(def edge (x)
  (- (# x) 1))

(def inner (x)
  (clip x 1 (edge x)))

(def tl (l) (cut l 1))

(def char (s n)
  (%js (s.charAt n))
  (%lua (clip s n (+ n 1))))

(def code (s n)
  (%js (s.charCodeAt n))
  (%lua (string.byte s (if n (+ n 1)))))

(def string-literal? (x)
  (and (string? x) (= (char x 0) "\"")))

(def id-literal? (x)
  (and (string? x) (= (char x 0) "|")))

(def add (l x)
  (%js (do (l.push x) nil))
  (%lua (table.insert l x)))

(def drop (l)
  (%js (l.pop))
  (%lua (table.remove l)))

(def last (l)
  (at l (edge l)))

(def almost (l)
  (cut l 0 (edge l)))

(def reverse (l)
  (with l1 (keys l)
    (let i (edge l)
      (while (>= i 0)
        (add l1 (at l i))
        (dec i)))))

(def reduce (f x)
  (if (none? x) nil
      (one? x) (hd x)
    (f (hd x) (reduce f (tl x)))))

(def join ls
  (if (two? ls)
      (let ((a b) ls)
        (if (and a b)
            (let (c () o (# a))
              (each (k v) a
                (set (get c k) v))
              (each (k v) b
                (when (number? k)
                  (inc k o))
                (set (get c k) v))
              c)
          (or a b ())))
    (or (reduce join ls) ())))

(def find (f t)
  (each x t
    (let y (f x)
      (if y (return y)))))

(def first (f l)
  (step x l
    (let y (f x)
      (if y (return y)))))

(def in? (x t)
  (find (fn (y) (= x y)) t))

(def pair (l)
  (with l1 ()
    (for i (# l)
      (add l1 (list (at l i) (at l (+ i 1))))
      (inc i))))

(def sort (l f)
  (%lua (do (table.sort l f) l))
  (%js (l.sort (when f (fn (a b) (if (f a b) -1 1))))))

(def map (f x)
  (with t ()
    (step v x
      (let y (f v)
        (if (is? y)
          (add t y))))
    (each (k v) x
      (unless (number? k)
        (let y (f v)
          (when (is? y)
            (set (get t k) y)))))))

(def keep (f x)
  (map (fn (v) (when (f v) v)) x))

(def keys? (t)
  (each (k v) t
    (unless (number? k)
      (return true)))
  false)

(def empty? (t)
  (each x t
    (return false))
  true)

(def stash (args)
  (when (keys? args)
    (let p ()
      (each (k v) args
        (unless (number? k)
          (set (get p k) v)))
      (set p._stash true)
      (add args p)))
  args)

(def unstash (args)
  (if (none? args) ()
    (let l (last args)
      (if (and (~atom? l) (~function? l) l._stash)
          (with args1 (almost args)
            (each (k v) l
              (unless (= k '_stash)
                (set (get args1 k) v))))
        args))))

(def search (s pattern start)
  (%js
    (let i (s.indexOf pattern start))
    (if (>= i 0) i))
  (%lua
    (let (start (if start (+ start 1))
          i (string.find s pattern start true))
      (and i (- i 1)))))

(def split (s sep)
  (if (or (= s "") (= sep "")) ()
    (with l ()
      (let n (# sep)
        (while true
          (let i (search s sep)
            (if (nil? i) (break)
              (do (add l (clip s 0 i))
                  (set s (clip s (+ i n)))))))
        (add l s)))))

(def cat xs
  (or (reduce (fn (a b) (cat a b)) xs) ""))

(def + xs
  (or (reduce (fn (a b) (+ a b)) xs) 0))

(def - xs
  (or (reduce (fn (b a) (- a b)) (reverse xs)) 0))

(def * xs
  (or (reduce (fn (a b) (* a b)) xs) 1))

(def / xs
  (or (reduce (fn (b a) (/ a b)) (reverse xs)) 1))

(def % xs
  (or (reduce (fn (b a) (% a b)) (reverse xs)) 0))

(def > (a b) (> a b))
(def < (a b) (< a b))
(def = (a b) (= a b))
(def >= (a b) (>= a b))
(def <= (a b) (<= a b))

(def number (s)
  (%lua
    (tonumber s))
  (%js
    (let n (parseFloat s)
        (unless (isNaN n) n))))

(def number-code? (n)
  (and (> n 47) (< n 58)))

(def numeric? (s)
  (let n (# s)
    (for i n
      (unless (number-code? (code s i))
        (return false))))
  true)

(%js (var tostring (x) (x.toString)))

(def escape (s)
  (let s1 "\""
    (for i (# s)
      (let (c (char s i)
            c1 (if (= c "\n") "\\n"
                   (= c "\"") "\\\""
                   (= c "\\") "\\\\"
                 c))
        (cat! s1 c1)))
    (cat s1 "\"")))

(def str (x depth)
  (if (and depth (> depth 40)) "circular"
      (nil? x) "nil"
      (nan? x) "nan"
      (= x inf) "inf"
      (= x -inf) "-inf"
      (boolean? x) (if x "true" "false")
      (string? x) (escape x)
      (atom? x) (tostring x)
      (function? x) "fn"
    (let (s "(" sp ""
          xs () ks ()
          d (+ (or depth 0) 1))
      (each (k v) x
        (if (number? k)
            (set (get xs k) (str v d))
          (do (add ks (cat k ":"))
              (add ks (str v d)))))
      (each v (join xs ks)
        (cat! s sp v)
        (set sp " "))
      (cat s  ")"))))

(%lua (var values (or unpack table.unpack)))

(def apply (f args)
  (let args (stash args)
    (%js (f.apply f args))
    (%lua (f (values args)))))

(def call (f) (f))

(def toplevel? ()
  (one? environment))

(def setenv (k rest: keys)
  (when (string? k)
    (let (frame (if keys.toplevel
                    (hd environment)
                  (last environment))
          entry (or (get frame k) (obj)))
      (each (k v) keys
        (set (get entry k) v))
      (set (get frame k) entry))))

(%js (def print (x) (console.log x)))

(%js (var math Math))

(def abs math.abs)
(def acos math.acos)
(def asin math.asin)
(def atan math.atan)
(def atan2 math.atan2)
(def ceil math.ceil)
(def cos math.cos)
(def floor math.floor)
(def log math.log)
(def log10 math.log10)
(def max math.max)
(def min math.min)
(def pow math.pow)
(def random math.random)
(def sin math.sin)
(def sinh math.sinh)
(def sqrt math.sqrt)
(def tan math.tan)
(def tanh math.tanh)

(setup)

(defspecial bang ()
  (cat "#!/usr/bin/env " (%js "node") (%lua "luajit")))

(mac elf ()
  `(do (bang)
       (when (undef? elf*)
         (def elf* true)
         (%js
           (unless (undef? process)
             (let-symbol (p process.env.NODE_PATH)
               (if (and p (> p.length 0))
                   (cat! p ":" __dirname)
                 (set p __dirname)))
             (let Module (require 'module)
               (Module._initPaths))))
         (%lua
           ,(let p '(get (debug.getinfo 1 "S") 'source)
              `(cat! package.path
                 ";" (or ((get ,p 'match) ,p "[@]?(.*/)[^/]+[.]lua") "./") "?.lua"))))
       (require 'elf)))

