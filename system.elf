;; -*- mode: lisp -*-

(%js

  (var fs (require 'fs))

  (var path (require 'path))

  (var read-file (path)
    (fs.readFileSync path 'utf8))

  (var write-file (path data)
    (fs.writeFileSync path data 'utf8))

  (var file-exists? (path)
    (fs.existsSync path 'utf8))

  (var path-separator path.sep)

  (var path-join parts
    (or (reduce (fn (x y) (cat x path-separator y)) parts) ""))

  (var get-environment-variable (name)
    (get process.env name))

  (var write (x)
    (process.stdout.write x))

  (var exit (code)
    (process.exit code))

  (var argv
    (cut process.argv 2))

  (var shell (cmd)
    (var childproc (require 'child_process))
    (let x (childproc.execSync cmd)
      (x.toString))))

(%lua

  (var call-with-file (f file)
    (let |h,e| file
      (unless h
        (error e))
      (with x (f h)
        (h.close h))))

  (let-macro ((with-file ((var path mode) rest: body)
               `(call-with-file (fn (,var) ,@body)
                                (io.open ,path ,mode))))

    (var read-file (path)
      (with-file (f path)
        (f.read f '*a)))

    (var write-file (path data)
      (with-file (f path 'w)
        (f.write f data)))

    (var file-exists? (path)
      (with-file (f path)
        (is? f))))

  (var path-separator (char _G.package.config 0))

  (var path-join parts
    (or (reduce (fn (x y) (cat x path-separator y)) parts) ""))

  (var get-environment-variable (name)
    (os.getenv name))

  (var write (x)
    (io.write x))

  (var exit (code)
    (os.exit code))

  (var argv
    (if (nil? arg) ()
      (with l ()
        (for i (# arg)
          (add l (at arg i))))))

  (var shell (cmd)
    (let x (io.popen cmd)
      (x.read x "*a"))))

(var reload (module)
  (%lua (wipe (get package.loaded module)))
  (%js (wipe (get require.cache (require.resolve module))))
  (require module))

(export read-file
        write-file
        file-exists?
        path-separator
        path-join
        get-environment-variable
        write
        exit
        argv
        shell
        reload)
