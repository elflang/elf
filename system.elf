;; -*- mode: lisp -*-

(%js

  (define fs (require 'fs))

  (define path (require 'path))

  (define read-file (path)
    (fs.readFileSync path 'utf8))

  (define write-file (path data)
    (fs.writeFileSync path data 'utf8))

  (define file-exists? (path)
    (fs.existsSync path 'utf8))

  (define path-separator path.sep)

  (define path-join parts
    (or (reduce (fn (x y) (cat x path-separator y)) parts) ""))

  (define get-environment-variable (name)
    (get process.env name))

  (define write (x)
    (process.stdout.write x))

  (define exit (code)
    (process.exit code))

  (define argv
    (cut process.argv 2)))

(%lua

  (define call-with-file (f file)
    (let |h,e| file
      (unless h
        (error e))
      (with x (f h)
        (h.close h))))

  (let-macro ((with-file ((var path mode) rest: body)
               `(call-with-file (fn (,var) ,@body)
                                (io.open ,path ,mode))))

    (define read-file (path)
      (with-file (f path)
        (f.read f '*a)))

    (define write-file (path data)
      (with-file (f path 'w)
        (f.write f data)))

    (define file-exists? (path)
      (with-file (f path)
        (is? f))))

  (define path-separator (char _G.package.config 0))

  (define path-join parts
    (or (reduce (fn (x y) (cat x path-separator y)) parts) ""))

  (define get-environment-variable (name)
    (os.getenv name))

  (define write (x)
    (io.write x))

  (define exit (code)
    (os.exit code))

  (define argv
    (if (is? arg) arg ())))

(export read-file
        write-file
        file-exists?
        path-separator
        path-join
        get-environment-variable
        write
        exit
        argv)
