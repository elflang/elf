;; -*- mode: lisp -*-

(%js

  (define fs (require 'fs))

  (define read-file (path)
    ((get fs 'readFileSync) path 'utf8))

  (define write-file (path data)
    ((get fs 'writeFileSync) path data 'utf8))

  (define file-exists? (path)
    ((get fs 'existsSync) path 'utf8))

  (define path-separator (get (require 'path) 'sep))

  (define path-join parts
    (or (reduce (fn (x y) (cat x path-separator y)) parts) ""))

  (define get-environment-variable (name)
    (get (get process 'env) name))

  (define write (x)
    (let out (get process 'stdout)
      ((get out 'write) x)))

  (define exit (code)
    ((get process 'exit) code))

  (define argv
    (cut (get process 'argv) 2)))

(%lua

  (define call-with-file (f file)
    (let |h,e| file
      (unless h
        (error e))
      (with x (f h)
        ((get h 'close) h))))

  (let-macro ((with-file ((var path mode) rest: body)
               `(call-with-file (fn (,var) ,@body)
                                ((get io 'open) ,path ,mode))))

    (define read-file (path)
      (with-file (f path)
        ((get f 'read) f '*a)))

    (define write-file (path data)
      (with-file (f path 'w)
        ((get f 'write) f data)))

    (define file-exists? (path)
      (with-file (f path)
        (is? f))))

  (define path-separator (char (get (get _G 'package) 'config) 0))

  (define path-join parts
    (or (reduce (fn (x y) (cat x path-separator y)) parts) ""))

  (define get-environment-variable (name)
    ((get os 'getenv) name))

  (define write (x)
    ((get io 'write) x))

  (define exit (code)
    ((get os 'exit) code))

  (define argv
    (if (is? arg) arg ())))

(export read-file
        write-file
        file-exists?
        path-separator
        path-join
        get-environment-variable
        write
        exit
        argv)
