;; -*- mode: lisp -*-

(elf)

(use reader compiler)

(var passed 0)
(var failed 0)
(var tests ())

(mac test (x msg)
  `(if (not ,x)
       (do (= failed (+ failed 1))
	   (return ,msg))
     (inc passed)))

(var equal? (a b)
  (if (atom? a) (is a b)
    (is (str a) (str b))))

(mac eq (a b)
  `(test (equal? ,a ,b)
	 (cat "failed: expected " (str ,a) ", was " (str ,b))))

(mac deftest (name rest: body)
  `(add tests (list ',name (fn () ,@body))))

(def run-tests ()
  (each ((name f)) tests
    (let result (f)
      (when (string? result)
        (print (cat " " name " " result)))))
  (print (cat " " passed " passed, " failed " failed")))

(deftest reader
  (let read reader.read-string
    (eq nil (read ""))
    (eq "nil" (read "nil"))
    (eq 17 (read "17"))
    (eq 0.015 (read "1.5e-2"))
    (eq true (read "true"))
    (eq (not true) (read "false"))
    (eq 'hi (read "hi"))
    (eq '"hi" (read "\"hi\""))
    (eq "|hi|" (read "|hi|"))
    (eq '(1 2) (read "(1 2)"))
    (eq '(1 (a)) (read "(1 (a))"))
    (eq '(quote a) (read "'a"))
    (eq '(quasiquote a) (read "`a"))
    (eq '(quasiquote (unquote a)) (read "`,a"))
    (eq '(quasiquote (unquote-splicing a)) (read "`,@a"))
    (eq 2 (# (read "(1 2 a: 7)")))
    (eq 7 (get (read "(1 2 a: 7)") 'a))
    (eq true (get (read "(:a)") 'a))
    (eq 1 (- -1))
    (eq true (nan? (read "nan")))
    (eq true (nan? (read "-nan")))
    (eq true (inf? (read "inf")))
    (eq true (inf? (read "-inf")))
    (eq "0?" (read "0?"))
    (eq "0!" (read "0!"))
    (eq "0." (read "0."))))

(deftest read-more
  (let read reader.read-string
    (eq 17 (read "17" true))
    (let more ()
      (eq more (read "(open" more))
      (eq more (read "\"unterminated " more))
      (eq more (read "|identifier" more))
      (eq more (read "'(a b c" more))
      (eq more (read "`(a b c" more))
      (eq more (read "`(a b ,(z" more))
      (eq more (read "`\"biz" more))
      (eq more (read "'\"boz" more)))
    (let ((ok msg) (guard (read "(open")))
      (eq false ok)
      (eq "Expected ) at 5" msg))))

(deftest boolean
  (eq true (or true false))
  (eq false (or false false))
  (eq true (or false false true))
  (eq true (not false))
  (eq true (not (and false true)))
  (eq false (not (or false true)))
  (eq true (~and false true))
  (eq false (~or false true))
  (eq true (and true true))
  (eq false (and true false))
  (eq false (and true true false)))

(deftest short
  (eq true (or true (error 'bad)))
  (eq false (and false (error 'bad)))
  (let a true
    (eq true (or true (do (= a false) false)))
    (eq true a)
    (eq false (and false (do (= a false) true)))
    (eq true a))
  (let b true
    (eq true (or (do (= b false) false) (do (= b true) b)))
    (eq true b)
    (eq true (or (do (= b true) b) (do (= b true) b)))
    (eq true b)
    (eq true (and (do (= b false) true) (do (= b true) b)))
    (eq true b)
    (eq false (and (do (= b false) b) (do (= b true) b)))
    (eq false b)))

(deftest numeric
  (eq 4 (+ 2 2))
  (eq 4 (apply + '(2 2)))
  (eq 0 (apply + ()))
  (eq 18 18.00)
  (eq 4 (- 7 3))
  (eq 4 (apply - '(7 3)))
  (eq 0 (apply - ()))
  (eq 5.0 (/ 10 2))
  (eq 5.0 (apply / '(10 2)))
  (eq 1 (apply / ()))
  (eq 6 (* 2 3.00))
  (eq 6 (apply * '(2 3.00)))
  (eq 1 (apply * ()))
  (eq true (> 2.01 2))
  (eq true (>= 5.0 5.0))
  (eq true (> 2.1e3 2000))
  (eq true (< 2e-3 0.0021))
  (eq false (< 2 2))
  (eq true (<= 2 2))
  (eq -7 (- 7)))

(deftest math
  (eq 3 (max 1 3))
  (eq 2 (min 2 7))
  (let n (random)
    (eq true (and (> n 0) (< n 1))))
  (eq 4 (floor 4.78)))

(deftest precedence
  (eq -3 (- (+ 1 2)))
  (eq 10 (- 12 (+ 1 1)))
  (eq 11 (- 12 (* 1 1)))
  (eq 10 (+ (/ 4 2) 8)))

(deftest standalone
  (eq 10 (do (+ illegal) 10))
  (let x nil
    (eq 9 (do (list nothing fooey (= x 10)) 9))
    (eq 10 x))
  (eq 12 (do (get but zz) 12)))

(deftest string
  (eq 3 (# "foo"))
  (eq 3 (# "\"a\""))
  (eq 'a "a")
  (eq "a" (char "bar" 1))
  (let s "a
b"
    (eq 3 (# s)))
  (let s "a
b
c"
    (eq 5 (# s)))
  (eq 3 (# "a\nb"))
  (eq 3 (# "a\\b")))

(deftest quote
  (eq 7 (quote 7))
  (eq true (quote true))
  (eq false (quote false))
  (eq (quote a) 'a)
  (eq (quote (quote a)) ''a)
  (eq "\"a\"" '"a")
  (eq "\"\\n\"" (quote "\n"))
  (eq "\"\\\\\"" (quote "\\"))
  (eq '(quote "a") ''"a")
  (eq "|(|" '|(|)
  (eq (quote unquote) 'unquote)
  (eq (quote (unquote)) '(unquote))
  (eq (quote (unquote a)) '(unquote a)))

(deftest list
  (eq '() (list))
  (eq () (list))
  (eq '(a) (list 'a))
  (eq '(a) (quote (a)))
  (eq '(()) (list (list)))
  (eq 0 (# (list)))
  (eq 2 (# (list 1 2)))
  (eq '(1 2 3) (list 1 2 3))
  (eq 17 (get (list foo: 17) 'foo))
  (eq 17 (get (list 1 foo: 17) 'foo))
  (eq true (get (list :foo) 'foo))
  (eq true (get '(:foo) 'foo))
  (eq true (get (hd '((:foo))) 'foo))
  (eq '(:a) (list :a))
  (eq '(b: false) (list b: false))
  (eq '(c: 0) (list c: 0)))

(deftest quasiquote
  (eq (quote a) (quasiquote a))
  (eq 'a `a)
  (eq () `())
  (eq 2 `,2)
  (eq nil `(,@nil))
  (let a 42
    (eq 42 `,a)
    (eq 42 (quasiquote (unquote a)))
    (eq '(quasiquote (unquote a)) ``,a)
    (eq '(quasiquote (unquote 42)) ``,,a)
    (eq '(quasiquote (quasiquote (unquote (unquote a)))) ```,,a)
    (eq '(quasiquote (quasiquote (unquote (unquote 42)))) ```,,,a)
    (eq '(a (quasiquote (b (unquote c)))) `(a `(b ,c)))
    (eq '(a (quasiquote (b (unquote 42)))) `(a `(b ,,a)))
    (let b 'c
      (eq '(quote c) `',b)
      (eq '(42) `(,a))
      (eq '((42)) `((,a)))
      (eq '(41 (42)) `(41 (,a)))))
  (let c '(1 2 3)
    (eq '((1 2 3)) `(,c))
    (eq '(1 2 3) `(,@c))
    (eq '(0 1 2 3) `(0 ,@c))
    (eq '(0 1 2 3 4) `(0 ,@c 4))
    (eq '(0 (1 2 3) 4) `(0 (,@c) 4))
    (eq '(1 2 3 1 2 3) `(,@c ,@c))
    (eq '((1 2 3) 1 2 3) `((,@c) ,@c)))
  (let a 42
    (eq '(quasiquote ((unquote-splicing (list a)))) ``(,@(list a)))
    (eq '(quasiquote ((unquote-splicing (list 42)))) ``(,@(list ,a))))
  (eq true (get `(:foo) 'foo))
  (let (a 17
        b '(1 2)
        c (obj a: 10)
        d (list a: 10))
    (eq 17 (get `(foo: ,a) 'foo))
    (eq 2 (# `(foo: ,a ,@b)))
    (eq 17 (get `(foo: ,@a) 'foo))
    (eq '(1 a: 10) `(1 ,@c))
    (eq '(1 a: 10) `(1 ,@d))
    (eq true (get (hd `((:foo))) 'foo))
    (eq true (get (hd `(,(list :foo))) 'foo))
    (eq true (get `(,@(list :foo)) 'foo))
    (eq true (get `(1 2 3 ,@'(:foo)) 'foo)))
  (let-macro ((a keys `(obj ,@keys)))
    (eq true (get (a :foo) 'foo))
    (eq 17 (get (a bar: 17) 'bar)))
  (let-macro ((a () `(obj baz: (fn () 17))))
    (eq 17 ((get (a) 'baz)))))

(deftest quasiexpand
  (eq 'a (macroexpand 'a))
  (eq '(17) (macroexpand '(17)))
  (eq '(1 z) (macroexpand '(1 z)))
  (eq '(%array 1 "z") (macroexpand '`(1 z)))
  (eq '(%array 1 z) (macroexpand '`(,1 ,z)))
  (eq 'z (macroexpand '`(,@z)))
  (eq '(join (%array 1) z) (macroexpand '`(,1 ,@z)))
  (eq '(join (%array 1) x y) (macroexpand '`(,1 ,@x ,@y)))
  (eq '(join (%array 1) z (%array 2)) (macroexpand '`(,1 ,@z ,2)))
  (eq '(join (%array 1) z (%array "a")) (macroexpand '`(,1 ,@z a)))
  (eq '"x" (macroexpand '`x))
  (eq '(%array "quasiquote" "x") (macroexpand '``x))
  (eq '(%array "quasiquote" (%array "quasiquote" "x")) (macroexpand '```x))
  (eq 'x (macroexpand '`,x))
  (eq '(%array "quote" x) (macroexpand '`',x))
  (eq '(%array "quasiquote" (%array "x")) (macroexpand '``(x)))
  (eq '(%array "quasiquote" (%array "unquote" "a")) (macroexpand '``,a))
  (eq '(%array "quasiquote" (%array (%array "unquote" "x")))
         (macroexpand '``(,x))))

(deftest calls
  (let (f (fn () 42)
	l (list f)
	t (obj f: f))
    (eq 42 (f))
    (eq 42 ((at l 0)))
    (eq 42 ((get t 'f)))
    (eq nil ((fn () (return))))
    (eq 10 ((fn (x) (- x 2)) 12))))

(deftest id
  (let (a 10
        b (obj x: 20)
        f (fn () 30))
    (eq 10 a)
    (eq 10 |a|)
    (eq 20 |b.x|)
    (eq 30 |f()|)))

(deftest names
  (let (a! 0
        b? 1
        -% 2
        ** 3
        break 4)
    (eq 0 a!)
    (eq 1 b?)
    (eq 2 -%)
    (eq 3 **)
    (eq 4 break)))

(deftest assign
  (let a 42
    (assign a 'bar)
    (eq 'bar a)
    (let x (assign a 10)
      (eq 10 x)
      (eq 10 a))
    (assign a false)
    (eq false a)
    (assign a)
    (eq nil a)))

(deftest =
  (let (a 42 b 7)
    (= a 'foo b 'bar)
    (eq 'foo a)
    (eq 'bar b)
    (let x (= a 10)
      (eq 10 x)
      (eq 10 a))
    (= a false)
    (eq false a)
    (= a)
    (eq nil a)))

(deftest wipe
  (let x '(:a :b :c)
    (wipe (get x 'a))
    (eq nil (get x 'a))
    (eq true (get x 'b))
    (wipe (get x 'c))
    (eq nil (get x 'c))
    (eq true (get x 'b))
    (wipe (get x 'b))
    (eq nil (get x 'b))
    (eq () x)))

(deftest do
  (let a 17
    (do (= a 10)
	(eq 10 a))
    (eq 10 (do a))
    (let b (do (= a 2) (+ a 5))
      (eq a 2)
      (eq b 7))
    (do (= a 10)
        (do (= a 20)
            (eq 20 a)))
    (eq 20 (do (= a 10)
                  (do (= a 20) a)))))

(deftest if
  (eq 'a (macroexpand '(if a)))
  (eq '(%if a b) (macroexpand '(if a b)))
  (eq '(%if a b c) (macroexpand '(if a b c)))
  (eq '(%if a b (%if c d)) (macroexpand '(if a b c d)))
  (eq '(%if a b (%if c d e)) (macroexpand '(if a b c d e)))
  (if true
      (eq true true)
    (eq true false))
  (if false (eq true false)
      false (eq false true)
    (eq true true))
  (if false (eq true false)
      false (eq false true)
      false (eq false true)
    (eq true true))
  (if false (eq true false)
      true (eq true true)
      false (eq false true)
    (eq true true))
  (eq 1 (if true 1 2))
  (eq 1 (if (let a 10 a) 1 2))
  (eq 1 (if true (with a 1) 2))
  (eq 1 (if false 2 (let a 1 a)))
  (eq 1 (if false 2 true (with a 1)))
  (eq 1 (if false 2 false 3 (let a 1 a))))

(deftest case
  (let x 10
    (eq 2 (case x 9 9 10 2 4)))
  (let x 'z
    (eq 9 (case x 'z 9 10))
    (eq 7 (case x 'a 1 'b 2 7))))

(deftest while
  (let i 0
    (while (< i 5)
      (if (is i 3) (break) (inc i)))
    (eq 3 i)
    (while (< i 10)
      (inc i))
    (eq 10 i)
    (let a (while (< i 15) (inc i))
      (eq nil a)
      (eq 15 i))
    (let b
        (while (< i 20)
          (if (is i 19)
              (break)
            (inc i)))
      (eq nil a)
      (eq 19 i))))

(deftest for
  (let l ()
    (for i 5
      (add l i))
    (eq '(0 1 2 3 4) l))
  (eq '(0 1) (with l () (for i 2 (add l i)))))

(deftest table
  (eq 10 (get (obj a: 10) 'a))
  (eq true (get (obj :a) 'a)))

(deftest empty
  (eq true (empty? ()))
  (eq true (empty? (obj)))
  (eq false (empty? '(1)))
  (eq false (empty? '(:a)))
  (eq false (empty? (obj :a)))
  (eq false (empty? '(b: false))))

(deftest at
  (let l '(a b c d)
    (eq 'a (at l 0))
    (eq 'a l.0)
    (eq 'b (at l 1))
    (= (at l 0) 9)
    (eq 9 (at l 0))
    (= (at l 3) 10)
    (eq 10 (at l 3))))

(deftest get-=
  (let t (obj)
    (= (get t 'foo) 'bar)
    (eq 'bar (get t 'foo))
    (eq 'bar (get t "foo"))
    (eq 'bar t.foo)
    (let k 'foo
      (eq 'bar (get t k)))
    (eq 'bar (get t (cat "f" "oo")))))

(deftest each
  (let t '(1 2 3 :a b: false)
    (let (a 0 b 0)
      (each (k v) t
        (if (number? k)
            (inc a)
          (inc b)))
      (eq 3 a)
      (eq 2 b))
    (let a 0
      (each x t (inc a))
      (eq 5 a)))
  (let t '((1) (2) b: (3))
    (each x t
      (eq false (atom? x)))
    (each (x) t
      (eq false (atom? x)))
    (each ((x)) t
      (eq true (number? x)))))

(deftest fn
  (let f (fn (n) (+ n 10))
    (eq 20 (f 10))
    (eq 30 (f 20))
    (eq 40 ((fn (n) (+ n 10)) 30))
    (eq '(2 3 4) (map (fn (x) (+ x 1)) '(1 2 3)))))

(deftest define
  (var x 20)
  (var f () 42)
  (eq 20 x)
  (eq 42 (f))
  ((fn ()
     (var f () 38)
     (eq 38 (f))))
  (eq 42 (f)))

(deftest return
  (let a ((fn () 17))
    (eq 17 a))
  (let a ((fn () (if true 10 20)))
    (eq 10 a))
  (let a ((fn () (while false (blah))))
    (eq nil a))
  (let a 11
    (let b ((fn () (inc a)))
      (eq 12 b)
      (eq 12 a))))

(deftest guard
  (let-macro ((guard1 (x) `(cut (guard ,x) 0 2)))
    (eq '(true 42) (guard1 42))
    (eq '(false foo) (guard1 (error "foo")))
    (eq '(false foo) (guard1 (do (error "foo") (error "baz"))))
    (eq '(false baz) (guard1 (do (guard1 (error "foo")) (error "baz"))))
    (eq '(true 42) (guard1 (if true 42 (error "baz"))))
    (eq '(false baz) (guard1 (if false 42 (error "baz"))))))

(deftest let
  (let a 10
    (eq 10 a))
  (let (a 10)
    (eq 10 a))
  (let (a 11
	b 12)
    (eq 11 a)
    (eq 12 b))
  (let (a 1)
    (eq 1 a)
    (let (a 2)
      (eq 2 a))
    (eq 1 a))
  (let (a 1)
    (let (a 2)
      (let (a 3)
        (eq a 3))
      (eq a 2))
    (eq a 1))
  (let (a 20)
    (eq 20 a)
    (let (a (+ a 7))
      (eq 27 a))
    (let (a (+ a 10))
      (eq 30 a))
    (eq 20 a))
  (eq 10 (let (a 10) a))
  (let (a (let (b 12) b))
    (eq 12 a))
  (let (a (let (a 10) a))
    (eq 10 a))
  (let (a (+ (let (a 0)
               (= a 10)
               (+ a 2))
             3))
    (eq a 15))
  ((fn (zz)
     (eq 20 zz)
     (let (zz 21)
       (eq 21 zz))
     (eq 20 zz))
   20)
  (let q 9
    ((fn ()
       (let q 10
         (eq 10 q))
       (eq 9 q)))))

(deftest with
  (eq 10 (with x 9 (inc x))))

(deftest let-when
  (eq nil (let-when frips (is 'a 'b) 19))
  (eq 19 (let-when frips 20 (- frips 1)))
  (eq 20 (let-when (a b) '(19 20) b))
  (eq nil (let-when (a b) nil b)))

(var zzop 99)
(var zzap 100)

(let (zzop 10
      zzap (+ zzop 10)
      (zza zzb) '(1 2 3 a: 10 b: 20))
  (deftest let-toplevel1
    (eq 10 zzop)
    (eq 20 zzap)
    (eq 1 zza)
    (eq 2 zzb)))

(deftest let-toplevel
  (eq 99 zzop)
  (eq 100 zzap))

(deftest reserved
  (let (end 'zz
        try 'yy
        return 99)
    (eq 'zz end)
    (eq 'yy try)
    (eq '99 return))
  (var var (if end return)
    (return (+ if end return)))
  (eq 6 (var 1 2 3)))

(deftest destructuring
  (let ((a b c) '(1 2 3))
    (eq 1 a)
    (eq 2 b)
    (eq 3 c))
  (let ((w (x (y) z)) '(1 (2 (3) 4)))
    (eq 1 w)
    (eq 2 x)
    (eq 3 y)
    (eq 4 z))
  (let ((a b rest: c) '(1 2 3 4))
    (eq '(3 4) c))
  (let ((w (x rest: y) rest: z) '(1 (2 3 4) 5 6 7))
    (eq '(3 4) y)
    (eq '(5 6 7) z))
  (let ((:foo) (obj foo: 99))
    (eq 99 foo))
  (let ((:foo) (list foo: 99))
    (eq 99 foo))
  (let ((foo: a) (obj foo: 99))
    (eq 99 a))
  (let ((foo: (a b)) (obj foo: '(98 99)))
    (eq 98 a)
    (eq 99 b))
  (let ((:foo bar: (:baz))
        (obj foo: 42 bar: '(99 :baz)))
    (eq 42 foo)
    (eq true baz))
  (let ((a (b :foo) :bar)
        (list 10 (list 20 foo: 17) bar: '(1 2 3)))
    (eq 10 a)
    (eq 20 b)
    (eq 17 foo)
    (eq '(1 2 3) bar))
  (let yy (list 1 2 3)
    (let ((xx yy rest: zz) yy)
      (eq 1 xx)
      (eq 2 yy)
      (eq '(3) zz))))

(deftest let-macro
  (let-macro ((a () 17)
              (b (a) `(+ ,a 10)))
    (eq 17 (a))
    (eq 42 (b 32))
    (let-macro ((a () 1))
      (eq 1 (a)))
    (eq 17 (a)))
  (let-macro ((a () 18))
    (let (b (fn () 20))
      (eq 18 (a))
      (eq 20 (b))))
  (let-macro ((a (x)
                (let (x 10)
                  (= x 20))
                `(+ ,x 1)))
    (eq 2 (a 1))))

(deftest let-symbol
  (let-symbol (a 17
               b (+ 10 7))
    (eq 17 a)
    (eq 17 b)
    (let-symbol (a 1)
      (eq 1 a))
    (eq 17 a))
  (let-symbol (a 18)
    (let (b 20)
      (eq 18 a)
      (eq 20 b))))

(deftest defsym
  (defsym zzz 42)
  (eq zzz 42))

(deftest macros-and-symbols
  (let-symbol (a 1)
    (let-macro ((a () 2))
      (eq 2 (a)))
    (eq 1 a))
  (let-macro ((a () 2))
    (let-symbol (a 1)
      (eq 1 a))
    (eq 2 (a))))

(deftest macros-and-let
  (let a 10
    (eq a 10)
    (let-macro ((a () 12))
      (eq 12 (a)))
    (eq a 10))
  (let b 20
    (eq b 20)
    (let-symbol (b 22)
      (eq 22 b))
    (eq b 20))
  (let-macro ((c () 30))
    (eq 30 (c))
    (let c 32
      (eq 32 c))
    (eq 30 (c)))
  (let-symbol (d 40)
    (eq 40 d)
    (let d 42
      (eq 42 d))
    (eq 40 d)))

(deftest let-unique
  (let-unique (ham chap)
    (eq '_ham ham)
    (eq '_chap chap)
    (let-unique (ham)
      (eq '_ham1 ham))))

(deftest literals
  (eq true true)
  (eq false false)
  (eq true (< -inf -1e10))
  (eq false (< inf -1e10))
  (eq false (is nan nan))
  (eq true (nan? nan))
  (eq true (nan? (* nan 20)))
  (eq -inf (- inf))
  (eq inf (- -inf))
  (let (Inf 1 NaN 2 -Inf 'a -NaN 'b)
    (eq Inf 1)
    (eq NaN 2)
    (eq -Inf 'a)
    (eq -NaN 'b)))

(deftest add
  (let l ()
    (add l 'a)
    (add l 'b)
    (add l 'c)
    (eq '(a b c) l)
    (eq nil (add () 'a))))

(deftest drop
  (let l '(a b c)
    (eq 'c (drop l))
    (eq 'b (drop l))
    (eq 'a (drop l))
    (eq nil (drop l))))

(deftest last
  (eq 3 (last '(1 2 3)))
  (eq nil (last ()))
  (eq 'c (last '(a b c))))

(deftest join
  (eq '(1 2 3) (join '(1 2) '(3)))
  (eq '(1 2) (join () '(1 2)))
  (eq () (join () ()))
  (eq () (join nil nil))
  (eq () (join nil ()))
  (eq () (join))
  (eq () (join ()))
  (eq '(1) (join '(1) nil))
  (eq '(a) (join '(a) ()))
  (eq '(a) (join nil '(a)))
  (eq '(a) (join '(a)))
  (eq '(a :b) (join '(a) (obj :b)))
  (eq '(a b :b) (join '(a) '(b :b)))
  (eq '(a b: 10) (join '(a :b) (obj b: 10)))
  (eq '(b: 10) (join (obj :b) '(b: 10)))
  (let t (join '(a b: 1) '(b c: 2))
    (eq 1 (get t 'b))
    (eq 2 (get t 'c))
    (eq 'b (at t 1))))

(deftest reverse
  (eq () (reverse ()))
  (eq '(3 2 1) (reverse '(1 2 3)))
  (eq '(3 2 1 :a) (reverse '(1 2 3 :a))))

(deftest map
  (eq () (map (fn (x) x) ()))
  (eq '(1) (map (fn (x) x) '(1)))
  (eq '(2 3 4) (map (fn (x) (+ x 1)) '(1 2 3)))
  (eq '(2 3 4 a: 5) (map (fn (x) (+ x 1)) (list 1 2 3 a: 4)))
  (eq '(:a) (map (fn (x) x) '(:a)))
  (eq '(b: false) (map (fn (x) x) '(b: false)))
  (eq '(:a b: false) (map (fn (x) x) '(:a b: false)))
  (let evens (fn (x) (when (is (% x 2) 0) x))
    (eq '(2 4 6) (map evens '(1 2 3 4 5 6)))
    (eq '(2 4 6 b: 8) (map evens '(1 2 3 4 5 6 a: 7 b: 8)))))

(deftest cut
  (eq () (cut ()))
  (eq '(a) (cut '(a)))
  (eq '(b c) (cut '(a b c) 1))
  (eq '(b c) (cut '(a b c d) 1 3))
  (eq '(1 2 3) (cut '(1 2 3) 0 10))
  (eq '(1) (cut '(1 2 3) -4 1))
  (eq '(1 2 3) (cut '(1 2 3) -4))
  (eq '(2 :a) (cut '(1 2 :a) 1))
  (eq '(:a b: 2) (cut '(:a b: 2)))
  (let t '(1 2 3)
    (eq () (cut t (# t))))
  (let t '(1 2 3 :a)
    (eq '(:a) (cut t (# t)))))

(deftest clip
  (eq "uux" (clip "quux" 1))
  (eq "uu" (clip "quux" 1 3))
  (eq "" (clip "quux" 5))
  (eq "ab" (clip "ab" 0 4))
  (eq "ab" (clip "ab" -4 4))
  (eq "a" (clip "ab" -1 1)))

(deftest search
  (eq nil (search "" "a"))
  (eq 0 (search "" ""))
  (eq 0 (search "a" ""))
  (eq 0 (search "abc" "a"))
  (eq 2 (search "abcd" "cd"))
  (eq nil (search "abcd" "ce"))
  (eq nil (search "abc" "z")))

(deftest split
  (eq () (split "" ""))
  (eq () (split "" ","))
  (eq (list "a") (split "a" ","))
  (eq (list "a" "") (split "a," ","))
  (eq (list "a" "b") (split "a,b" ","))
  (eq (list "a" "b" "") (split "a,b," ","))
  (eq (list "a" "b") (split "azzb" "zz"))
  (eq (list "a" "b" "") (split "azzbzz" "zz")))

(deftest reduce
  (eq 'a (reduce (fn (a b) (+ a b)) '(a)))
  (eq 6 (reduce (fn (a b) (+ a b)) '(1 2 3)))
  (eq '(1 (2 3))
         (reduce
          (fn (a b) (list a b))
          '(1 2 3)))
  (eq '(1 2 3 4 5)
         (reduce
          (fn (a b) (join a b))
          '((1) (2 3) (4 5)))))

(deftest keep
  (eq () (keep (fn (x) x) ()))
  (let even (fn (x) (is (% x 2) 0))
    (eq '(6) (keep even '(5 6 7))))
  (eq '((1) (2 3)) (keep some? '(() (1) () (2 3))))
  (let even? (fn (x) (is (% x 2) 0))
    (eq '(2 4 6) (keep even? '(1 2 3 4 5 6)))
    (eq '(2 4 6 b: 8) (keep even? '(1 2 3 4 5 6 a: 7 b: 8)))))

(deftest in?
  (eq true (in? 'x '(x y z)))
  (eq true (in? 7 '(5 6 7)))
  (eq nil (in? 'baz '(no can do))))

(deftest find
  (eq nil (find (fn (x) x) ()))
  (eq 7 (find (fn (x) x) '(7)))
  (eq true (find (fn (x) (is x 7)) '(2 4 7)))
  (eq true (find (fn (x) (is x 7)) '(2 4 foo: 7)))
  (eq true (find (fn (x) (is x true)) '(2 4 :bar)))
  (eq true (in? 7 '(2 4 7)))
  (eq true (in? 7 '(2 4 foo: 7)))
  (eq true (in? true '(2 4 :bar))))

(deftest find
  (eq nil (first (fn (x) x) ()))
  (eq 7 (first (fn (x) x) '(7)))
  (eq true (first (fn (x) (is x 7)) '(2 4 7)))
  (eq 4 (first (fn (x) (and (> x 3) x)) '(1 2 3 4 5 6))))

(deftest sort
  (eq '(a b c) (sort '(c a b)))
  (eq '(3 2 1) (sort '(1 2 3) >)))

(deftest type
  (eq true (string? "abc"))
  (eq false (string? 17))
  (eq false (string? '(a)))
  (eq false (string? true))
  (eq false (string? (obj)))
  (eq false (number? "abc"))
  (eq true (number? 17))
  (eq false (number? '(a)))
  (eq false (number? true))
  (eq false (number? (obj)))
  (eq false (boolean? "abc"))
  (eq false (boolean? 17))
  (eq false (boolean? '(a)))
  (eq true (boolean? true))
  (eq false (boolean? (obj)))
  (eq true (atom? nil))
  (eq true (atom? "abc"))
  (eq true (atom? 42))
  (eq true (atom? true))
  (eq false (atom? (fn ())))
  (eq false (atom? '(1)))
  (eq false (atom? (obj))))

(deftest apply
  (eq 4 (apply (fn (a b) (+ a b)) '(2 2)))
  (eq '(2 2) (apply (fn a a) '(2 2)))
  (let t '(1)
    (= (get t 'foo) 17)
    (eq 17 (apply (fn a (get a 'foo)) t)))
  (eq 42 (apply (fn (:foo) foo) (list foo: 42)))
  (eq 42 (apply (fn ((:foo)) foo) (list (list foo: 42)))))

(deftest eval
  (let eval (get compiler 'eval)
    (eq 4 (eval '(+ 2 2)))
    (eq 5 (eval '(let a 3 (+ 2 a))))
    (eq 9 (eval '(do (var x 7) (+ x 2))))
    (eq 6 (eval '(apply + '(1 2 3))))))

(deftest call
  (let f (fn () 42)
    (eq 42 (call f)))
  (let fs (list (fn () 1) (fn () 10))
    (eq '(1 10) (map call fs))))

(deftest parameters
  (eq 42 ((fn ((a)) a) '(42)))
  (let f (fn (a (b c)) (list a b c))
    (eq '(1 2 3) (f 1 '(2 3))))
  (let f (fn (a (b rest: c) rest: d) (list a b c d))
    (eq '(1 2 (3 4) (5 6 7)) (f 1 '(2 3 4) 5 6 7)))
  (eq '(3 4) ((fn (a b rest: c) c) 1 2 3 4))
  (let f (fn (w (x rest: y) rest: z) (list y z))
    (eq '((3 4) (5 6 7)) (f 1 '(2 3 4) 5 6 7)))
  (eq 42 ((fn (:foo) foo) foo: 42))
  (eq 42 ((fn ((:foo)) foo) (list foo: 42)))
  (let f (fn (a bar: b (:foo)) (list a b foo))
    (eq '(10 20 42) (f 10 bar: 20 (list foo: 42))))
  (let f (fn args args)
    (eq '(1 2 3) (f 1 2 3))))

(eval-once
  (run-tests))

